// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// TODO when starting a new DB
// 1- Manually set foreign keys in supabase for userId
// 2- Make the function for the trigger
// 3- Set trigger on supabase to create a Profile when a new user is made
// https://nextdev1111.hashnode.dev/triggers-in-supabase-for-making-new-rows

// begin
// insert into public."Profile"(id)
// values(new.id);
// return new;
// end;

// -- trigger the function every time a new row is created in auth.users
// create trigger on_auth_users_insert
// after insert on auth.users
// for each row
// execute function public.create_profile_on_user_insert();

// drop trigger on_auth_users_insert on auth.users;

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}


model Spreadsheet {
  id         String  @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  user       Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @db.Uuid
  name       String   
  totalJobs  Int     @default(0)
  rows       SpreadsheetRow[]
}

model SpreadsheetRow {
  id             Int     @id @default(autoincrement())
  companyName    String
  jobUrl         String
  status         String
  position       String?
  positionNumber String?
  date           DateTime @default(now())
  spreadsheet    Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  spreadsheetId  String @db.Uuid
  user           Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String @db.Uuid
}

model Profile {
  id                     String @id @unique @db.Uuid // manually set foreign key in supabase
  spreadsheetRows        SpreadsheetRow[]
  spreadsheet            Spreadsheet[]
  defaultSpreadsheet     String  @default("")
  currentlyPaid          Boolean @default(false)
  stripeCustomerId       String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String? @unique @map(name: "stripe_subscription_id")
  stripePriceId          String? @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map(name: "stripe_current_period_end")
}
